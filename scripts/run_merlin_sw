#!/bin/bash
#
# Script to run the full MERLIN motion correction pipeline with
# sliding window navigators
#

usage() {
    cat <<EOF
    usage: bash run_merlin_sw -i input_file -p par.txt -o moco_folder

    Required arguments
    -i      Input .h5 file       
    -o      Output folder
    -p      Paramter file

    Optional arguments
    -v      Verbose
    -h      Help 

    Create the parameter file using
        > pymerlin param

    The parameter is a text file with the following content
        nspokes                 | Numer of spokes per interleave (int)
        nlores                  | Number of lores spokes (int)
        spoke_step              | Spoke step in sliding window (int)
        make_brain_mask         | Make a brain mask from reg navigator (0/1)
        brain_mask_file         | Use a specified brain mask (str)
        sense_maps              | Use specified sense maps (str)
        cg_its                  | Number of cgSENSE iterations (int)
        ds                      | Downsampling factor for navigators (int)
        fov                     | FOV for navigators in mm (int)
        overwrite_files         | Overwrite files when rerunning (0/1)
        riesling_verbose        | Verbosity for riesling output (0/1)
        ref_nav_num             | Navigator reference (int)
        metric                  | Registration metric (MS/MI)
        batch_itk               | Batch size for ITK registration (int)
        batch_riesling          | Batch size for riesling recon (int)
        threads_itk             | Num threads for ITK
        threads_riesling        | Num threads for riesling
EOF
}

echolog() {
    s="[$(date "+%F %T")] $1"
    echo $s
    echo $s >>log.out
}

check_rm_folder() {
    # Checks if folder exists and removes if desired
    # Inputs:
    #   $1 folder to create
    #   $2 Binary flag to overwrite

    new_folder=$1
    ow_flag=$2

    if [[ -d $new_folder ]]; then
        if [[ $ow_flag -eq 1 ]]; then
            echolog "You chose to overwrite files, removing $new_folder"
            rm -r $new_folder
        fi
    fi

}

# Default values
input_file=
moco_folder=
param_file=
verbose=0

# Parse commandline argument
while getopts "i:o:p:vh" o; do
    case "${o}" in
    i)
        input_file=${OPTARG}
        ;;
    o)
        moco_folder=${OPTARG}
        ;;
    p)
        param_file=${OPTARG}
        ;;
    h)
        usage
        ;;
    v)
        verbose=1
        ;;
    *)
        usage
        ;;
    esac
done

shift $((OPTIND - 1))
echolog "Reading parameters from: $param_file"
cat $param_file
source $param_file
echo $threads_riesling

# Checking commandline arguments
if [ -z $input_file ]; then
    echo "Input file is required. Use flag -i"
    exit
fi

if [ -z $param_file ]; then
    echo "Parameter file is required. Use flag -p"
fi

if [[ ! -e $input_file ]]; then
    echo "Input file ${input_file} does not exist"
    exit
fi

if [[ $threads_itk ]]; then
    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$threads_itk
fi

# Parse input file
filename=$(basename -- "$input_file")
extension="${filename##*.}"
input_basename="${filename%.*}"

fullpath_input=$(realpath ${input_file})

# Create output folder
if [[ -z $moco_folder ]]; then
    moco_folder=${input_basename}_mocodir
fi

if [[ -d $moco_folder ]]; then
    echo "$moco_folder already exists"
else
    mkdir $moco_folder
fi

cd $moco_folder
# Summary of moco
echolog "-------------------------------------------------------------------"
echolog "Starting MERLIN. Input file: ${fullpath_input}"

# Step 1 - Producing interleaves
echolog "[Step 1] Splitting input file into navigator volumes with riesling split"
int_folder="interleaves"
check_rm_folder $int_folder $overwrite_files
if [[ ! -d $int_folder ]]; then
    mkdir $int_folder
    riesling split -o ${int_folder}/${input_basename} --step=$spoke_step --lores=$nlores --nspokes=$nspokes -v --ds=$ds $fullpath_input
    mv ${int_folder}/${input_basename}-vol-00-lores.h5 ${input_basename}-waspi.h5
else
    echolog "$int_folder folder already exists, skipping this step"
fi

num_interleaves=$(ls ${int_folder} | wc -l)
echolog "Generated ${num_interleaves} interleaves"

# Step 2 - Reconstruct navigators
echolog "Step 2 - Reconstructing navigators"
nav_folder="navigators"
check_rm_folder $nav_folder $overwrite_files
if [[ ! -d $nav_folder ]]; then

    # Make SENSE maps
    if [ -z $sense_maps ]; then
        echolog "Making sense maps"
        riesling sense ${input_basename}-waspi.h5 --kernel=KB3 --sdc=pipenn --fov=256 --lambda=1000
        echolog "Finished SENSE maps"
        sense_maps=${input_basename}-waspi-sense.h5
    fi

    mkdir $nav_folder

    N=$batch_riesling
    k=0
    for ((i = 0; i < $num_interleaves; i++)); do
        ((k = k % N))
        ((k++ == 0)) && wait
        int_file=$(printf "%s/%s-vol-00-int-%02d.h5" ${int_folder} ${input_basename} ${i})
        out_file=${nav_folder}/${input_basename}-nav${i}

        echolog "Reconstructing $int_file"
        options="--sense=$sense_maps --kernel=KB3 --sdc=pipenn --toe --mag --fov=$fov
        --max_its=$cg_its --out=$out_file"
        if [ $threads_riesling ]; then
            options="${options} --nthreads=${threads_riesling}"
        fi
        echolog "Reconstructing navigator $i"
        riesling cg $options $int_file &
    done
else
    echolog "$nav_folder folder already exists, skipping this step"
fi
wait
echolog "Step 2 - Done!"

# Optional step 2.1 - Make brain mask for navigator registration
if [ $brain_mask_file ]; then
    use_brain_mask=1
elif [[ $make_brain_mask -eq 1 ]]; then
    bet_name=${input_basename}_refnav_bet
    if [[ ! -f ${bet_name}_mask.nii.gz ]]; then
        echolog "Making brain mask for reference navigator"
        h52nii.py ${nav_folder}/${input_basename}-nav${ref_nav_num}-cg.h5 --out ${input_basename}-nav${ref_nav_num}-cg.nii.gz
        hd-bet -i ${input_basename}-nav${ref_nav_num}-cg.nii.gz -device cpu -mode fast -tta 0 -o $bet_name
        fslmaths ${bet_name}_mask.nii.gz -dilM -dilM ${bet_name}_mask_dil
        nii2h5 ${bet_name}_mask_dil.nii.gz --out ${bet_name}_mask_dil.h5
        rm ${input_basename}-nav${ref_nav_num}-cg.nii.gz ${bet_name}_mask_dil.nii.gz
    fi
    use_brain_mask=1
    brain_mask_file=${bet_name}_mask_dil.h5
fi

# Step 3 - Registering navigators
echolog "[Step 3] Registering navigators"
reg_folder="registrations"
check_rm_folder $reg_folder $overwrite_files
all_reg_obj=all_reg_param.p

if [[ ! -d $reg_folder ]]; then
    mkdir $reg_folder
    ref_nav=${nav_folder}/${input_basename}-nav${ref_nav_num}-cg.h5

    N=$batch_itk
    k=0
    for ((i = 1; i < $num_interleaves; i++)); do
        ((k = k % N))
        ((k++ == 0)) && wait

        echolog "Registering navigator $i -> $ref_nav_num"
        reg_args="--verbose=0 --fixed=${ref_nav}"
        reg_args="${reg_args} --moving=${nav_folder}/${input_basename}-nav${i}-cg.h5"
        reg_args="${reg_args} --reg=${reg_folder}/reg_nav${ref_name}_2_nav${i}.p"
        reg_args="${reg_args} --log=${reg_folder}/log_nav${ref_name}_2_nav${i}.p"
        if [ $use_brain_mask ]; then
            reg_args="${reg_args} --fixed_mask=$brain_mask_file"
        fi

        # Run registration and merge registration objects
        pymerlin reg $reg_args &
    done
    echolog "Step 3 - Done!"
else
    echolog "$reg_folder folder already exists, skipping this step."
fi
wait

# Merge all registrations
if [[ ! -f "all_reg_param.p" ]]; then
    reglist=""
    for ((i = 1; i < $num_interleaves; i++)); do
        regname=${reg_folder}/reg_nav${ref_name}_2_nav${i}.p
        reglist="${reglist} $regname"
    done
    pymerlin merge --reg=${all_reg_obj} --spi=$nspokes --verbose=2
    pymerlin merge --reg ${all_reg_obj} --input $reglist --spi $nspokes --verbose 2
else
    echo log "all_reg_param.p already exists. Skiping this step"
fi

# Step 4 - Perform motion correction
echolog "[Step 4] Performing motion correction"
pymerlin moco --input=$fullpath_input --output=${input_basename}_moco.h5 --reg=$all_reg_obj --nseg $((nspokes / spoke_step)) --nlores $nlores --verbose 2

# Finished
