#!/bin/bash
#
# Script to run the full MERLIN motion correction pipeline with
# sliding window navigators
#

usage() {
    cat <<EOF
    usage: bash run_merlin -i input_file -n spokes_per_int

    Required arguments
    -i      | --input       
    -n      | --nspokes

    Optional arguments
    --out           | Output folder (./<input_mocodir>)
    --thr           | Navigator image threshold (300)
    --its           | CG SENSE iterations (8)
    --ds            | Navigator downsampling (3)
    --fov           | MOCO field of view (240)
    --ow            | Overwrite files without asking
    --step          | Step size for sliding window
    --ref           | Reference navigator
    --metric        | Metric (MS/MI), def MS
    --batchitk      | Batch size for parallel ITK
    --batchries     | Batch size for parallel riesling
    --threaditk     | Number of threads for ITK
    --threadries    | Number of threads for riesling
    -v              | --verbose (0)
    -h              | --help        
EOF
}

echolog() {
    s="[$(date "+%F %T")] $1"
    echo $s
    echo $s >>log.out
}

check_rm_folder() {
    # Checks if folder exists and removes if desired
    # Inputs:
    #   $1 folder to create
    #   $2 Binary flag to overwrite

    new_folder=$1
    ow_flag=$2

    if [[ -d $new_folder ]]; then
        if [[ $ow_flag -eq 1 ]]; then
            echolog "You chose to overwrite files, removing $new_folder"
            rm -r $new_folder
        fi
    fi

}

# Default values
input_file=
nspokes=
moco_folder=
nav_thr=
cg_its=8
ds=3
fov=240
overwrite_files=0
verbose=0
riesling_verbose=""
spoke_step=
tukey=
ref_nav_num=0
metric=MS
batch_itk=1
batch_riesling=1
threads_itk=
threads_riesling=

# Parse commandline argument
while [ "$1" != "" ]; do
    case $1 in
    -i | --input)
        shift
        input_file=$1
        ;;
    -n | --nspokes)
        shift
        nspokes=$1
        ;;
    --out)
        shift
        moco_folder=$1
        ;;
    --thr)
        shift
        nav_thr=$1
        ;;
    --its)
        shift
        cg_its=$1
        ;;
    --ds)
        shift
        ds=$1
        ;;
    --fov)
        shift
        fov=$1
        ;;
    --ow)
        shift
        overwrite_files=1
        ;;
    --ref)
        shift
        ref_nav_num=$1
        ;;
    --metric)
        shift
        metric=$1
        ;;
    --step)
        shift
        spoke_step=$1
        ;;
    --tukey)
        shift
        tukey_a=$1
        ;;
    --batchitk)
        shift
        batch_itk=$1
        ;;
    --batchries)
        shift
        batch_riesling=$1
        ;;
    --threaditk)
        shift
        threads_itk=$1
        ;;
    --threadries)
        shift
        threads_riesling=$1
        ;;
    -v | --verbose)
        shift
        verbose=1
        ;;
    -h | --help)
        usage
        exit
        ;;
    *)
        usage
        exit 1
        ;;
    esac
    shift
done

# Checking commandline arguments
if [ -z $input_file ]; then
    echo "Input file is required. Use flag -i / --input"
    exit
fi

if [[ ! -e $input_file ]]; then
    echo "Input file ${input_file} does not exist"
    exit
fi

if [ -z $nspokes ]; then
    echo "Number of spokes per interleave required. Use flag -n / --nspokes"
    exit
fi

if [[ $verbose -eq 1 ]]; then
    riesling_verbose="-v"
fi

if [[ $threads_itk ]]; then
    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$threads_itk
fi

# Parse input file
filename=$(basename -- "$input_file")
extension="${filename##*.}"
input_basename="${filename%.*}"

fullpath_input=$(realpath ${input_file})

# Create output folder
if [[ -z $moco_folder ]]; then
    moco_folder=${input_basename}_mocodir
fi

if [[ -d $moco_folder ]]; then
    echo "$moco_folder already exists"
else
    mkdir $moco_folder
fi

cd $moco_folder
# Summary of moco
echolog "-------------------------------------------------------------------"
echolog "Starting MERLIN. Input file: ${fullpath_input}"

# Step 1 - Producing interleaves
echolog "[Step 1] Splitting input file into navigator volumes with riesling split"
int_folder="interleaves"
check_rm_folder $int_folder $overwrite_files
if [[ ! -d $int_folder ]]; then
    mkdir $int_folder
    riesling split -o ${int_folder}/${input_basename} --step=$spoke_step --nspokes=$nspokes --ds=$ds $riesling_verbose $fullpath_input
    riesling split ${int_folder}/${input_basename}-lores.h5 --ds=$ds -v
    mv ${int_folder}/${input_basename}-lores-hires.h5 ${input_basename}-waspi.h5
    rm ${int_folder}/${input_basename}-lores.h5
else
    echolog "$int_folder folder already exists, skipping this step"
fi

num_interleaves=$(ls ${int_folder} | wc -l)
echolog "Generated ${num_interleaves} interleaves"

if [ $tukey_a ]; then
    echolog "Applying tukey filter"
    for ((i = 0; i < $num_interleaves; i++)); do
        tukey_name=${int_folder}/${input_basename}-int${i}
        pymerlin tukey --input ${tukey_name}.h5 --output ${tukey_name}_tukey.h5 --alpha $tukey_a
        rm ${tukey_name}.h5
        mv ${tukey_name}_tukey.h5 ${tukey_name}.h5
    done
fi

# Step 2 - Reconstruct navigators
echolog "Step 2 - Reconstructing navigators"
nav_folder="navigators"
check_rm_folder $nav_folder $overwrite_files

if [[ ! -d $nav_folder ]]; then
    mkdir $nav_folder

    # Make SENSE maps
    riesling sense ${input_basename}-waspi.h5 --sdc=pipe --fov=256 --lambda=1000

    N=$batch_riesling
    k=0
    for ((i = 0; i < $num_interleaves; i++)); do
        ((k = k % N))
        ((k++ == 0)) && wait
        int_file=${int_folder}/${input_basename}-int${i}.h5
        out_file=${nav_folder}/${input_basename}-nav${i}

        echolog "Reconstructing $int_file"
        options="--sense=${input_basename}-waspi-sense.h5 --kb --fast-grid --sdc=pipe --mag --fov=$fov
        --max_its=$cg_its --out=$out_file"
        if [ $threads_riesling ]; then
            options="${options} --nthreads=${threads_riesling}"
        fi
        echolog "Reconstructing navigator $i"
        riesling cg $options $int_file &
    done
else
    echolog "$nav_folder folder already exists, skipping this step"
fi
wait
echolog "Step 2 - Done!"

# Step 2.1 - Make brain mask for navigator registration
bet_name=${input_basename}_refnav_bet
if [[ ! -f ${bet_name}_mask.nii.gz ]]; then
    echolog "Making brain mask for reference navigator"
    h52nii.py ${nav_folder}/${input_basename}-nav${ref_nav_num}-cg.h5 --out ${input_basename}-nav${ref_nav_num}-cg.nii.gz
    hd-bet -i ${input_basename}-nav${ref_nav_num}-cg.nii.gz -device cpu -mode fast -tta 0 -o $bet_name
    fslmaths ${bet_name}_mask.nii.gz -dilM -dilM ${bet_name}_mask_dil
    nii2h5 ${bet_name}_mask_dil.nii.gz --out ${bet_name}_mask_dil.h5
    rm ${input_basename}-nav${ref_nav_num}-cg.nii.gz ${bet_name}_mask_dil.nii.gz
fi

# Step 3 - Registering navigators
echolog "[Step 3] Registering navigators"
reg_folder="registrations"
check_rm_folder $reg_folder $overwrite_files
all_reg_obj=all_reg_param.p

if [[ ! -d $reg_folder ]]; then
    mkdir $reg_folder
    ref_nav=${nav_folder}/${input_basename}-nav${ref_nav_num}-cg.h5
    brain_mask=${bet_name}_mask_dil.h5

    # Estimate image threshold from reference navigator if not set
    if [[ -z $nav_thr ]]; then
        echolog "Estimating navigator background threshold"
        nav_thr=$(pymerlin thr --input=$ref_nav)
        echolog "Threshold estimated to $nav_thr"
    fi

    N=$batch_itk
    k=0
    for ((i = 1; i < $num_interleaves; i++)); do
        ((k = k % N))
        ((k++ == 0)) && wait

        echolog "Registering navigator $i -> $ref_nav_num"
        move_nav=${nav_folder}/${input_basename}-nav${i}-cg.h5
        regname=${reg_folder}/reg_nav${ref_name}_2_nav${i}.p
        logname=${reg_folder}/log_nav${ref_name}_2_nav${i}.p

        # Run registration and merge registration objects
        pymerlin reg --fixed=$ref_nav --moving=$move_nav --verbose=0 --reg=$regname --log=$logname --fixed_mask=$brain_mask &
    done
    echolog "Step 3 - Done!"
else
    echolog "$reg_folder folder already exists, skipping this step."
fi
wait

# Merge all registrations
if [[ ! -f "all_reg_param.p" ]]; then
    reglist=""
    for ((i = 1; i < $num_interleaves; i++)); do
        regname=${reg_folder}/reg_nav${ref_name}_2_nav${i}.p
        reglist="${reglist} $regname"
    done
    pymerlin merge --reg=${all_reg_obj} --spi=$nspokes --verbose=2
    pymerlin merge --reg ${all_reg_obj} --input $reglist --spi $nspokes --verbose 2
else
    echo log "all_reg_param.p already exists. Skiping this step"
fi

# Step 4 - Perform motion correction
echolog "[Step 4] Performing motion correction"
pymerlin moco --input=$fullpath_input --output=${input_basename}_moco.h5 --reg=$all_reg_obj --nseg $((nspokes / spoke_step)) --verbose 2

# Finished
